plugins {
    id 'com.google.protobuf'
    id 'cpp'
    id 'java'
    id 'idea'
}

apply plugin: 'com.jfrog.bintray'
apply plugin: 'maven'
apply plugin: 'maven-publish'

task ciVersion {
    description = "Creates a continuous-delivery friendly version number for the service"

    def releaseType = project.hasProperty('releaseType') ? project.property('releaseType') : System.getenv('RELEASE_TYPE')
    def commitHash = project.hasProperty('commitHash') ? project.property('commitHash') : System.getenv('COMMIT_HASH')

    if (releaseType == 'release' || releaseType == 'r') {
        project.version = project.version
    } else if (releaseType == 'releaseCandidate' || releaseType == 'rc') {
        project.version = "${project.version}-RC".toString()
    } else if (releaseType == 'snapshot' || releaseType == 's') {
        if (commitHash) {
            project.version = "${project.version}-SNAPSHOT-${commitHash}".toString()
        } else {
            project.version = "${project.version}-SNAPSHOT".toString()
        }
    } else {
        logger.info("Property 'releaseType' was not specified. Defaulting to 'snapshot'")
        if (commitHash) {
            project.version = "${project.version}-SNAPSHOT-${commitHash}".toString()
        } else {
            project.version = "${project.version}-SNAPSHOT".toString()
        }
    }

    println "Setting CI Version for '${project.name}': ${version}"
}
build.dependsOn ciVersion

def pluginPrefix = "rsocket-rpc-java-${osdetector.os}-${osdetector.arch}"
def pluginName = "${pluginPrefix}.exe"
def artifactStagingPath = "$buildDir/artifacts" as File
def pathToPlugin = "${artifactStagingPath.getPath()}/${pluginName}"

repositories {
    jcenter()
    maven {
        url = 'https://dl.bintray.com/netifi/netifi-oss'
    }
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

dependencies {
    compileOnly 'io.projectreactor:reactor-core:3.1.7.RELEASE'
    compileOnly 'com.google.protobuf:protobuf-java:3.6.0'
    compileOnly 'javax.inject:javax.inject:1'
}

protobuf {
    generatedFilesBaseDir = "${projectDir}/src/generated"

    protoc {
        artifact = 'com.google.protobuf:protoc:3.6.0'
    }
    plugins {
        rsocketRpc {
            path = pathToPlugin
        }
    }
    generateProtoTasks {
        all().each { task ->
            task.dependsOn ':protobuf-rpc:java_pluginExecutable'
            task.inputs.file "$pathToPlugin"
            task.inputs.file "${rootProject.projectDir}/build.gradle"
            task.plugins {
                rsocketRpc {}
            }
        }
    }
}

// Adds space-delimited arguments from the environment variable env to the
// argList.
def addEnvArgs = { env, argList ->
    def value = System.getenv(env)
    if (value != null) {
        value.split(' +').each() { it -> argList.add(it) }
    }
}

// Adds corresponding "-l" option to the argList if libName is not found in
// LDFLAGS. This is only used for Mac because when building for uploadArchives
// artifacts, we add the ".a" files directly to LDFLAGS and without "-l" in
// order to get statically linked, otherwise we add the libraries through "-l"
// so that they can be searched for in default search paths.
def addLibraryIfNotLinked = { libName, argList ->
    def ldflags = System.env.LDFLAGS
    if (ldflags == null || !ldflags.contains('lib' + libName + '.a')) {
        argList.add('-l' + libName)
    }
}

String arch = rootProject.hasProperty('targetArch') ? rootProject.targetArch : osdetector.arch
boolean vcDisable = rootProject.hasProperty('vcDisable') ? rootProject.vcDisable : false

model {
    toolChains {
        // If you have both VC and Gcc installed, VC will be selected, unless you
        // set 'vcDisable=true'
        if (!vcDisable) {
            visualCpp(VisualCpp) {
            }
        }
        gcc(Gcc) {
            target("ppcle_64")
        }
        clang(Clang) {
        }
    }

    platforms {
        x86_32 {
            architecture "x86"
        }
        x86_64 {
            architecture "x86_64"
        }
        ppcle_64 {
            architecture "ppcle_64"
        }
    }

    components {
        java_plugin(NativeExecutableSpec) {
            if (arch in ['x86_32', 'x86_64', 'ppcle_64']) {
                // If arch is not within the defined platforms, we do not specify the
                // targetPlatform so that Gradle will choose what is appropriate.
                targetPlatform arch
            }
            baseName "$pluginPrefix"
        }
    }

    binaries {
        all {
            if (toolChain in Gcc || toolChain in Clang) {
                cppCompiler.define("RSOCKET_RPC_VERSION", version)
                cppCompiler.args "--std=c++0x"
                addEnvArgs("CXXFLAGS", cppCompiler.args)
                addEnvArgs("CPPFLAGS", cppCompiler.args)
                if (osdetector.os == "osx") {
                    cppCompiler.args "-mmacosx-version-min=10.7", "-stdlib=libc++"
                    addLibraryIfNotLinked('protoc', linker.args)
                    addLibraryIfNotLinked('protobuf', linker.args)
                } else if (osdetector.os == "windows") {
                    linker.args "-static", "-lprotoc", "-lprotobuf", "-static-libgcc", "-static-libstdc++",
                            "-s"
                } else {
                    // Link protoc, protobuf, libgcc and libstdc++ statically.
                    // Link other (system) libraries dynamically.
                    // Clang under OSX doesn't support these options.
                    linker.args "-Wl,-Bstatic", "-lprotoc", "-lprotobuf", "-static-libgcc",
                            "-static-libstdc++",
                            "-Wl,-Bdynamic", "-lpthread", "-s"
                }
                addEnvArgs("LDFLAGS", linker.args)
            } else if (toolChain in VisualCpp) {
                cppCompiler.define("RSOCKET_RPC_VERSION", version)
                cppCompiler.args "/EHsc", "/MT"
                if (rootProject.hasProperty('vcProtobufInclude')) {
                    cppCompiler.args "/I${rootProject.vcProtobufInclude}"
                }
                linker.args "libprotobuf.lib", "libprotoc.lib"
                if (rootProject.hasProperty('vcProtobufLibs')) {
                    linker.args "/LIBPATH:${rootProject.vcProtobufLibs}"
                }
            }
        }
    }
}

task buildArtifacts(type: Copy) {
    println 'generating artifacts'
    dependsOn 'java_pluginExecutable'
    from("$buildDir/exe/java_plugin") {
        if (osdetector.os != 'windows') {
            rename pluginPrefix, '$0.exe'
        }
    }
    into artifactStagingPath
}

compileJava.dependsOn ':protobuf-rpc:buildArtifacts'
compileJava.dependsOn ':protobuf-rpc:generateProto'

clean {
    delete protobuf.generatedFilesBaseDir
}

artifacts {
    archives("$pathToPlugin" as File) {
        classifier osdetector.os + "-" + osdetector.arch
        type "exe"
        extension "exe"
        builtBy buildArtifacts
    }
}

//publishing {
//    publications {
//        maven(MavenPublication) {
//            artifactId "${project.ext.artifactName}"
//            artifact(pathToPlugin) {
//                classifier osdetector.os + "-" + osdetector.arch
//                builtBy buildArtifacts
//            }
//        }
//    }
//}


if ("$version".contains('SNAPSHOT') || "$version".contains('RC')) {
    publishing {
        publications {
            maven(MavenPublication) {
                artifactId "${project.ext.artifactName}"
                artifact(pathToPlugin) {
                    classifier osdetector.os + "-" + osdetector.arch
                    builtBy buildArtifacts
                }
            }
        }
        repositories {
            maven {
                url = version.contains('SNAPSHOT') ? 'https://artifactory.netifiinc.com/artifactory/libs-snapshot-local' : 'https://artifactory.netifiinc.com/artifactory/libs-release-local'
                credentials {
                    username = project.hasProperty('netifiArtifactoryUsername') ? project.property('netifiArtifactoryUsername') : System.getenv('NETIFI_ARTIFACTORY_USERNAME')
                    password = project.hasProperty('netifiArtifactoryPassword') ? project.property('netifiArtifactoryPassword') : System.getenv('NETIFI_ARTIFACTORY_PASSWORD')
                }
            }
        }
    }
} else {
    publishing {
        publications {
            maven(MavenPublication) {
                artifactId "${project.ext.artifactName}"
                artifact(pathToPlugin) {
                    classifier osdetector.os + "-" + osdetector.arch
                    builtBy buildArtifacts
                }
            }
        }
    }

    bintray {
        user = project.hasProperty('bintrayUser') ? project.property('bintrayUser') : System.getenv('BINTRAY_USER')
        key = project.hasProperty('bintrayKey') ? project.property('bintrayKey') : System.getenv('f')

        publications = ['maven']

        //dryRun = true
        publish = (osdetector.os == 'osx')
        override = true

        pkg {
            repo = 'netifi-oss'
            name = "${artifactName}".toString()
            userOrg = 'netifi'
            desc = "${project.description}"
            websiteUrl = 'https://github.com/netifi/rsocket-rpc-java'
            issueTrackerUrl = 'https://github.com/netifi/rsocket-rpc-java/issues'
            vcsUrl = 'https://github.com/netifi/rsocket-rpc-java.git'
            licenses = ['Apache-2.0']
            githubRepo = 'netifi/rsocket-rpc-java'
            githubReleaseNotesFile = 'CHANGELOG.md'

            version {
                name = "$project.version".toString()
            }
        }
    }
}
